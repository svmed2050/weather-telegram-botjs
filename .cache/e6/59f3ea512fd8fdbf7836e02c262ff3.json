{"id":"node_modules/safe-compare/index.js","dependencies":[{"name":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\package.json","includedInParent":true,"mtime":1682170834578},{"name":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\safe-compare\\package.json","includedInParent":true,"mtime":1682168598815},{"name":"crypto","loc":{"line":8,"column":21,"index":98},"parent":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\safe-compare\\index.js","resolved":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\crypto-browserify\\index.js"},{"name":"buffer-alloc","loc":{"line":9,"column":26,"index":135},"parent":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\safe-compare\\index.js","resolved":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\buffer-alloc\\index.js"},{"name":"buffer","parent":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\safe-compare\\index.js","resolved":"C:\\Users\\Pavel\\Desktop\\TelegramBot\\node_modules\\buffer\\index.js"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n/**\n * @author Michael Raith\n * @date   24.02.2016 12:04\n */\n\n'use strict';\n\nvar crypto = require('crypto');\nvar bufferAlloc = require('buffer-alloc');\n\n\n/**\n * Do a constant time string comparison. Always compare the complete strings\n * against each other to get a constant time. This method does not short-cut\n * if the two string's length differs.\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar safeCompare = function safeCompare(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var lenA = strA.length;\n    var result = 0;\n\n    if (lenA !== strB.length) {\n        strB = strA;\n        result = 1;\n    }\n\n    for (var i = 0; i < lenA; i++) {\n        result |= (strA.charCodeAt(i) ^ strB.charCodeAt(i));\n    }\n\n    return result === 0;\n};\n\n\n/**\n * Call native \"crypto.timingSafeEqual\" methods.\n * All passed values will be converted into strings first.\n *\n * Runtime is always corresponding to the length of the first parameter (string\n * a).\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar nativeTimingSafeEqual = function nativeTimingSafeEqual(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var aLen = Buffer.byteLength(strA);\n    var bLen = Buffer.byteLength(strB);\n\n    // Always use length of a to avoid leaking the length. Even if this is a\n    // false positive because one is a prefix of the other, the explicit length\n    // check at the end will catch that.\n    var bufA = bufferAlloc(aLen, 0, 'utf8');\n    bufA.write(strA);\n    var bufB = bufferAlloc(aLen, 0, 'utf8');\n    bufB.write(strB);\n\n    return crypto.timingSafeEqual(bufA, bufB) && aLen === bLen;\n};\n\n\nmodule.exports = (\n    typeof crypto.timingSafeEqual !== 'undefined' ?\n        nativeTimingSafeEqual :\n        safeCompare\n);\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/safe-compare/index.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/safe-compare/index.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}}],"sources":{"node_modules/safe-compare/index.js":"/**\n * @author Michael Raith\n * @date   24.02.2016 12:04\n */\n\n'use strict';\n\nvar crypto = require('crypto');\nvar bufferAlloc = require('buffer-alloc');\n\n\n/**\n * Do a constant time string comparison. Always compare the complete strings\n * against each other to get a constant time. This method does not short-cut\n * if the two string's length differs.\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar safeCompare = function safeCompare(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var lenA = strA.length;\n    var result = 0;\n\n    if (lenA !== strB.length) {\n        strB = strA;\n        result = 1;\n    }\n\n    for (var i = 0; i < lenA; i++) {\n        result |= (strA.charCodeAt(i) ^ strB.charCodeAt(i));\n    }\n\n    return result === 0;\n};\n\n\n/**\n * Call native \"crypto.timingSafeEqual\" methods.\n * All passed values will be converted into strings first.\n *\n * Runtime is always corresponding to the length of the first parameter (string\n * a).\n *\n * @param {string} a\n * @param {string} b\n *\n * @return {boolean}\n */\nvar nativeTimingSafeEqual = function nativeTimingSafeEqual(a, b) {\n    var strA = String(a);\n    var strB = String(b);\n    var aLen = Buffer.byteLength(strA);\n    var bLen = Buffer.byteLength(strB);\n\n    // Always use length of a to avoid leaking the length. Even if this is a\n    // false positive because one is a prefix of the other, the explicit length\n    // check at the end will catch that.\n    var bufA = bufferAlloc(aLen, 0, 'utf8');\n    bufA.write(strA);\n    var bufB = bufferAlloc(aLen, 0, 'utf8');\n    bufB.write(strB);\n\n    return crypto.timingSafeEqual(bufA, bufB) && aLen === bLen;\n};\n\n\nmodule.exports = (\n    typeof crypto.timingSafeEqual !== 'undefined' ?\n        nativeTimingSafeEqual :\n        safeCompare\n);\n"},"lineCount":77}},"error":null,"hash":"d45aa2cc39717c8bb8bcdabf7db2d1ab","cacheData":{"env":{}}}